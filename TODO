
			Todo list of ktap project
			

Implementing
------------

- GC
- read kernel memory by symbol
- non-mainthread error exit problem(like printf arg mismatch)
- ktapio support global and percpu mode
- event library support(more type logic into compiler)
- ARM support
- kprobe/uprobe support
- improve printf performance
- call ktap script in while loop shell script issue
- maintaince different kernel version branch of ktap
- splice io output
- kernel_string()/user_string()
- only tracing on cpu: ktap -c cpu *.kp
- support ktap -bl, show listing all bytecodes
- support trace dump only to relayfs, without to userspace when tracing
- support ktap -c cmd, ktap -p $pid
- optimize tracepoints_histogram.kp, use perf event id as key index, boost performance
- support thread local based variable/map, and cpu variables
- support ktap thread exit, but need to probe_end function before exit
- unified extendable library interface
- product more useful ktap script
- not-tracing mode support(side effects mode)
- ktap Manual/Doc/ppt/pdf/man writing
- more lightwight traceing infrastructure support
- parrot research: use opcode generate like parrot?
- ktap -e "oneline scripting"
- distro packages: yum install ktap, apt-get install ktap
- website in ktap.org (ROR on free hosting site? fast deployment)
- conference
- commit to kernel: staging first?
- integrate luajit, and use ffi library, to boost performance
  use libffi to perform jprobe, get function arguments without gcc compiling
- staticly typed virtual machine, it's more generic than dynamic typed vm
  support map/splice/struct/closure
  staticly typed is more faster than dynamic typed, with strict type checking
- dynamic patch mechanism by ktap.
  replace function in runtime
- research a new powerful interpreter serves for ktap and systemtap, even dtrace
  for static compiled language, use systemtap is enough.


Completed
---------

- event based tracing infrastructure
- Drop ftrace.patch
- table stat showing
- ktap memory allocation
- per-cpu ktap_State for performance improvement
- x86-64 support
- ktapio problem in all event tracepoints opened
  (fixed by patch "relay: fix timer madness" merge in 3.10)
- issue: trace_end function cannot print into ktapio
- change comments sytle to "#"
- backport to 3.4 kernel
- support paris(t) in table
- All tracepoints support
- Timer support
- function call speedup
- dumpstack support
- script argument support
- fast loading
- Interval timer probes fire periodicalle
	Available units: timer.s, jiffies, s/sec, ms/msec, us/usec, ns/nsec
        Add variation with .randomize(N)
    The profile timer runs on every systerm tick
        timer.profile
     runs on all CPUS, Includes context of interrupted process
- More built-in functions:
    - Printing
    print(), println(), printd(), printf(),
    sprint(), sprintln(), sprintd(), sprintf()
    - Strings
    strlen(), substr(), isinstr(), strtol()
    - Timestamps
    get_cycles(), gettimeofday_s(), gettimeofday_ns()
    - Context
    cpu(), execname(), tid(), pid(), uid(),
    backtrace(), print_stack(), print_backtrace(),
    pp(), probefunc(), probemod()

- fibonacci in ktap

- unified event probe interface:
  kdebug.probe("tracepoint:xxx", eventfun);
  kdebug.probe("tp:xxx", eventfun);
  kdebug.probe("kprobes:xxx", eventfun);
  kdebug.probe("k:xxx", eventfun);
  kdebug.probe("k:xxx!", eventfun);  //kretprobe
  kdebug.probe("uprobes:xxx:yyy", eventfun);
  kdebug.probe("u:xxx:yyy", eventfun);
  kdebug.probe("u:xxx:yyy!", eventfun); //uretprobe

  kdebug.probe("cache-misses", eventfun) //Hardware event
  kdebug.probe("page-faults", eventfun) //Software event
  kdebug.probe("branch-load-misses", eventfun) //Hardware cache event
  kdebug.probe("mem:<addr>[:access]", eventfun) //Hardware breakpoint
  kdebug.probe("net:netif_rx", eventfun) //Tracepoint event

  kdebug.probe("kprobes:xxx, uprobes:xxx:yyy, cache-misses", eventfun) //support multi-event

- kernel_version() base function call

- dead loop detaction
- test script for verification

- making ktap syntax more C like

- request mailing list: ktap@freelist.org


